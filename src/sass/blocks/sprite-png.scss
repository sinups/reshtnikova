// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$phone-name: 'phone';
$phone-x: 0px;
$phone-y: 0px;
$phone-offset-x: 0px;
$phone-offset-y: 0px;
$phone-width: 21px;
$phone-height: 24px;
$phone-total-width: 71px;
$phone-total-height: 47px;
$phone-image: '../img/sprite-png.png';
$phone: (0px, 0px, 0px, 0px, 21px, 24px, 71px, 47px, '../img/sprite-png.png', 'phone', );
$reg1-name: 'reg1';
$reg1-x: 25px;
$reg1-y: 0px;
$reg1-offset-x: -25px;
$reg1-offset-y: 0px;
$reg1-width: 24px;
$reg1-height: 19px;
$reg1-total-width: 71px;
$reg1-total-height: 47px;
$reg1-image: '../img/sprite-png.png';
$reg1: (25px, 0px, -25px, 0px, 24px, 19px, 71px, 47px, '../img/sprite-png.png', 'reg1', );
$reg2-name: 'reg2';
$reg2-x: 0px;
$reg2-y: 28px;
$reg2-offset-x: 0px;
$reg2-offset-y: -28px;
$reg2-width: 21px;
$reg2-height: 19px;
$reg2-total-width: 71px;
$reg2-total-height: 47px;
$reg2-image: '../img/sprite-png.png';
$reg2: (0px, 28px, 0px, -28px, 21px, 19px, 71px, 47px, '../img/sprite-png.png', 'reg2', );
$reg3-name: 'reg3';
$reg3-x: 25px;
$reg3-y: 28px;
$reg3-offset-x: -25px;
$reg3-offset-y: -28px;
$reg3-width: 20px;
$reg3-height: 19px;
$reg3-total-width: 71px;
$reg3-total-height: 47px;
$reg3-image: '../img/sprite-png.png';
$reg3: (25px, 28px, -25px, -28px, 20px, 19px, 71px, 47px, '../img/sprite-png.png', 'reg3', );
$reg4-name: 'reg4';
$reg4-x: 53px;
$reg4-y: 0px;
$reg4-offset-x: -53px;
$reg4-offset-y: 0px;
$reg4-width: 18px;
$reg4-height: 16px;
$reg4-total-width: 71px;
$reg4-total-height: 47px;
$reg4-image: '../img/sprite-png.png';
$reg4: (53px, 0px, -53px, 0px, 18px, 16px, 71px, 47px, '../img/sprite-png.png', 'reg4', );
$spritesheet-width: 71px;
$spritesheet-height: 47px;
$spritesheet-image: '../img/sprite-png.png';
$spritesheet-sprites: ($phone, $reg1, $reg2, $reg3, $reg4, );
$spritesheet: (71px, 47px, '../img/sprite-png.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
